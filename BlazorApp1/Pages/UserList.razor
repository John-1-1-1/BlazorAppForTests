@page "/fetchdata"
@using BlazorApp1.Service
@using BlazorApp1.DataBaseClasses
@using Microsoft.EntityFrameworkCore

@inject IDataBaseService DataBaseService

<AuthorizeView  Context="auth" Roles="Admin">
    <Authorized>
        <PageTitle>UserList</PageTitle>
        <div class="container">
            <div class="row">
                <div class="col-8">
                    <h1>Пользователи сети:</h1>

                    <table class="table">
                        <thead>
                        <tr>
                            <th>Id</th>
                            <th>ФИО</th>
                            <th>Пост</th>
                            <th>Роль</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (_users == null) {
                            <p>Нет пользователей</p>
                        }
                        else {
                            @foreach (var user in _users) {
                                <tr>
                                    <td>@user.Id</td>
                                    <td>@(user.LastName + " " + user.Name + " " + user.MiddleName)</td>
                                    <td>@user.Post?.PostName</td>
                                    <td>@user.Role?.Name</td>
                                    <td><button type="button" @onclick="() => DeleteUser(user.Id)">Удалить</button></td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
                <div class="col-2">
                    <button @onclick="@Open">Добавить пользователя</button>
                    <button @onclick="@OpenRolesModal">Добавить роль</button>
                </div>
            </div>
        </div>
    
        <Modal @ref="Modal">
            <Title>Добавление пользователя</Title>
            <Body>
            <EditForm EditContext="@EditContext">
                <DataAnnotationsValidator/>
                <div class="container">
                    <div class="row">
                        <div class="col-sm">
                            <p>
                                <label for="last_name_add">Фамилия</label>
                                <br/>
                                <input @bind="@User.LastName" name='last_name_add' id="last_name_add"/>
                                <ValidationMessage For="@(() => User.LastName)"/>
                            </p>
                            <p>
                                <label for="name_add">Имя</label>
                                <br/>
                                <input @bind="@User.Name" name='name_add' id="name_add"/>
                                <ValidationMessage For="@(() => User.Name)"/>
                            </p>
                            <p>
                                <label for="middle_name_add">Отчество</label>
                                <br/>
                                <input @bind="@User.MiddleName" name='middle_name_add' id="middle_name_add"/>
                                <ValidationMessage For="@(() => User.MiddleName)"/>
                            </p>
                        </div>
                        <div class="col-sm">
                            <p>
                                <label for="login_add">Логин</label>
                                <br/>
                                <input @bind="@User.Login" name='login_add' id="login_add"/>
                                <ValidationMessage For="@(() => User.Login)"/>
                            </p>
                            <p>
                                <label for="pass_add">Пароль</label>
                                <br/>
                                <input @bind="@User.Pass" name='pass_add' id="pass_add"/>
                                <ValidationMessage For="@(() => User.Pass)"/>
                            </p>
                        </div>
                    </div>
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col-sm">
                            <select @bind="@User.RoleId" class="form-select form-select-lg mb-3" aria-label=".form-select-lg">
                                <option value="0">Открыть меню выбора</option>
                                @foreach (var role in DataBaseService.GetRoles()) {
                                    <option value="@role.Id">@role.Name</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => User.RoleId)"/>
                        </div>
                        <div class="col-sm">
                            <select @bind="@User.PostId" class="form-select form-select-lg mb-3" aria-label=".form-select-lg">
                                <option value="0">Открыть меню выбора</option>
                                @foreach (var post in DataBaseService.GetPosts()) {
                                    <option value="@post.Id">@post.PostName</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => User.PostId)"/>
                        </div>
                    </div>
                </div>
            </EditForm>
            </Body>
            <Footer>
                <button type="button" class="btn btn-primary" @onclick="@Validate">Сохранить</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@Close">Выйти</button>
            </Footer>
        </Modal>

        <Modal @ref="@ModalRole">
            <Title>Роли</Title>
            <Body>
            <div class="container">
                <div class="row">
                    <div class="col-sm">
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Id</th>
                                <th>Роль</th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (_roles == null) {
                                <p>Нет пользователей</p>
                            }
                            else {
                                @foreach (var role in _roles) {
                                    <tr>
                                        <td>@role.Id</td>
                                        <td>@role.Name</td>
                                        <td><button type="button" @onclick="() => DeleteRole(role.Id)">Удалить</button></td>
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <EditForm EditContext="@EditContextRole">
                <DataAnnotationsValidator/>
                <p>
                    <label for="role_add">Наименование роли</label>
                    <br/>
                    <input @bind="@Role.Name" name='role_add' id="role_add"/>
                    <ValidationMessage For="@(() => Role.Name)"/>
                </p>
            </EditForm>
            </Body>
            <Footer>
                <button type="button" class="btn btn-primary" @onclick="@ValidateRole">Сохранить</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@CloseRole">Выйти</button>
            </Footer>
            @code {
                
                public Role Role { get; set; } = new Role();

                public EditContext EditContextRole { get; set; }

                public void OpenRolesModal() {
                    EditContextRole = new EditContext(Role);
                    ModalRole.Open();
                }
                
                private Modal? ModalRole { get; set; }

                private void ValidateRole() {
                    if (EditContextRole.Validate()) {
                        DataBaseService.AddRole(Role);
                        Role = new Role();
                        EditContextRole = new EditContext(Role);
                        UpdateTableRoles();
                        Close();
                    }
                }
                private void UpdateTableRoles() {
                    _roles = DataBaseService.GetRoles();
                    InvokeAsync(StateHasChanged);
                }

                private void CloseRole() => ModalRole.Close();
            }
        </Modal>
        
    </Authorized>
    <NotAuthorized>
        <RoleNoAccess/>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<Role> _roles;
    
    private EditContext? EditContext { get; set; }
                
    private User User { get; set; } = new();

    protected override void OnInitialized() {
        base.OnInitialized();
        
        _users = DataBaseService.GetUsers();
        _roles = DataBaseService.GetRoles();
        
        EditContext = new EditContext(User);
        EditContextRole = new EditContext(Role);
    }
    private Modal? Modal { get; set; }
            
    private List<User>? _users;

    private void Open() => Modal?.Open();
            
    private void Close() => Modal?.Close();

    private void Validate() {
        if (EditContext.Validate()) {
            DataBaseService.AddUser(User);
            User = new User();
            EditContext = new EditContext(User);
            UpdateTable();
            Close();
        }
    }

    private void UpdateTable() {
        _users = DataBaseService.GetUsers();
        InvokeAsync(StateHasChanged);
    }

    private void DeleteUser(int userId) {
        DataBaseService.DeleteUser(userId);
        UpdateTable();
    }

    private void DeleteRole(int roleId) {
        DataBaseService.DeleteRole(roleId);
        UpdateTable();
    }

}