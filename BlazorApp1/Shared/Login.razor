@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using BlazorApp1.Data
@using BlazorApp1.DataBaseClasses
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Internal
@using Microsoft.Net.Http.Headers
@using Npgsql.Replication
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient
@inject DataBaseManager DataBaseManager

<div style="top: 25%; position: absolute; width: 100%;">
    
    <div style="height: 250px;  width: 250px; text-align: center;
    text-align: center;
    margin: auto;   
    ">
        <h2>Login Form</h2>
        <EditForm  EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" >
            <DataAnnotationsValidator  />

            <p>
                <label>Email</label><br/>
                <input @bind="@PassData.Login" name='email'/>
                 <ValidationMessage For="@(() => PassData.Login)" />
            </p>
            <p>
                <label>Password</label><br/>
                <input @bind="@PassData.Pass" type='password' name='password'/>
                <ValidationMessage For="@(() => PassData.Pass)" />
            </p>
            <ValidationMessage For="@(() => pass)" />
            <input type='submit' value='Login'/>
        </EditForm >
    </div>
</div>

@code {
    
    User PassData = new User();

    ValidationMessageStore _messageStore;
    
    protected override void OnInitialized() {   
        base.OnInitialized();
        EditContext = new EditContext(PassData);
        
        EditContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(EditContext);
    }

    private bool pass = true;
    
    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e) {

        _messageStore.Clear();
        if (DataBaseManager.IsExistUser(PassData.Login, PassData.Pass)) {
            _messageStore.Add(() => pass, "Не верный логин или пароль");
        }
    }

    private async Task HandleValidSubmit() {    
        
        var errors = new Dictionary<string, List<string>>();

        if (string.IsNullOrEmpty(PassData.Login))
        {
            errors.Add(nameof(PassData.Login),
                new() { "For a 'Defense' ship classification, " +
                        "'Description' is required." });
        }
        
    // если пользователь не найден, отправляем статусный код 401
        //if (person is null) return Results.Unauthorized();
        
            var query = new Dictionary<string, string> {  
                { "login", PassData.Login },  
                { "pass", "Trivedi" }  
            };  
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString("/login", query),  true);
    }

    public EditContext EditContext { get; set; }

}
