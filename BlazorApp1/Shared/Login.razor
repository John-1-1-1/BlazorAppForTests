@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using BlazorApp1.DataBaseClasses
@using BlazorApp1.Service
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Internal
@using Microsoft.Net.Http.Headers
@using Npgsql.Replication
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient
@inject IDataBaseService DataBaseService

<div style="top: 25%; position: absolute; width: 100%;">

    <div style="height: 250px;  width: 250px; text-align: center;
    text-align: center;
    margin: auto;   
    ">
        <h2>Login Form</h2>
        <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator/>

            <p>
                <label>Email</label><br/>
                <input @bind="@_passData.Login" name='email'/>
                <ValidationMessage For="@(() => _passData.Login)"/>
            </p>
            <p>
                <label>Password</label><br/>
                <input @bind="@_passData.Pass" type='password' name='password'/>
                <ValidationMessage For="@(() => _passData.Pass)"/>
            </p>
            <ValidationMessage For="@(() => _pass)"/>
            <input type='submit' value='Login'/>
        </EditForm >
    </div>
</div>

@code {

     User _passData = new User();

    private EditContext? EditContext { get; set; }

    private bool _pass = true;

    ValidationMessageStore? _messageStore;

    protected override void OnInitialized() {
        base.OnInitialized();
        EditContext = new EditContext(_passData);

        EditContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(EditContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e) {
        _messageStore?.Clear();

        if (!DataBaseService.IsExistUser(_passData.Login, HashSha256Service.CreateSha256(_passData.Pass))) {
            _messageStore?.Add(() => _pass, "Не верный логин или пароль");
        }
    }

    private Task HandleValidSubmit() {
        var errors = new Dictionary<string, List<string>>();


        if (string.IsNullOrEmpty(_passData.Login)) {
            errors.Add(nameof(_passData.Login),
                new() {
                    "For a 'Defense' ship classification, " +
                    "'Description' is required."
                });
        }

    // если пользователь не найден, отправляем статусный код 401
    //if (person is null) return Results.Unauthorized();

        var user = DataBaseService.GetUserByLogin(_passData.Login);
        
        var query = new Dictionary<string, string> {
            { "login", _passData.Login },
            { "hashPass", HashSha256Service.CreateSha256(_passData.Pass) },
            { "role", user.Role.Name }
        };
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString("/login", query), true);
        return Task.CompletedTask;
    }

}